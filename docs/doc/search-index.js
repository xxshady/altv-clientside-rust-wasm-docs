var searchIndex = new Map(JSON.parse('[\
["rust_wasm",{"doc":"","t":"QQCHHCCCCFNNNNNNNNFNNNNNNNNNNNKH","n":["__log","__log_warn","base_objects","main","on_every_tick","detached_player","docs_borrowed","player","scope","DetachedPlayer","attach_to_scope","borrow","borrow_mut","from","into","try_from","try_into","type_id","Player","borrow","borrow_mut","detach_from_scope","fmt","from","get_by_id","into","name","try_from","try_into","type_id","Scope","new_scope"],"q":[[0,"rust_wasm"],[5,"rust_wasm::base_objects"],[9,"rust_wasm::base_objects::detached_player"],[18,"rust_wasm::base_objects::player"],[30,"rust_wasm::base_objects::scope"],[32,"core::option"],[33,"core::result"],[34,"core::any"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::ops::function"]],"d":["","","","","","","What are borrowed base objects","","","Player instance “detached” from <code>scope</code>, “detached” …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Scope where “borrowed” base objects (for example …",""],"i":[0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,0,0],"f":"```{{}b}0`````{{dc}{{h{f}}}j}{ce{}{}}0{cc{}}1{c{{l{e}}}{}{}}0{cn{}}`33{fd}{{fA`}Ab}4{{cAd}{{h{f}}}j}6{fAf}554`{ec{}{{Aj{`}{{Ah{c}}}}}}","c":[],"p":[[1,"unit"],[5,"DetachedPlayer",9],[5,"Player",18],[6,"Option",32],[10,"Scope",30],[6,"Result",33],[5,"TypeId",34],[5,"Formatter",35],[8,"Result",35],[1,"u32"],[5,"String",36],[17,"Output"],[10,"FnOnce",37]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
